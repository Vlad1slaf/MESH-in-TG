from aiogram import Router, F, Bot
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from config.settings import settings
import aiohttp
import urllib.parse
from services.database import save_yandex_token
from typing import Union
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardRemove
import logging  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å logging


logger = logging.getLogger(__name__)

logger.setLevel(logging.DEBUG)

router = Router()


class AuthState(StatesGroup):
    WAITING_FOR_CODE = State()


@router.message(Command("login"))
async def cmd_start(message: Message, bot: Bot, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Å—ã–ª–∫—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."""
    auth_url = (
        f"https://oauth.yandex.ru/authorize?"
        f"response_type=code&client_id={settings.YANDEX_CLIENT_ID}&redirect_uri={settings.REDIRECT_URI}"
    )
    keyboard = [
        [InlineKeyboardButton(text="üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å", url=auth_url)],
    ]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    await message.answer(
        "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º —É—á–∏—Ç–µ–ª—è —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å.",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    await state.set_state(AuthState.WAITING_FOR_CODE)
    logger.info(f"User {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.")


@router.message(AuthState.WAITING_FOR_CODE, F.text)
async def process_code(message: Message, bot: Bot, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –æ–±–º–µ–Ω–∏–≤–∞–µ—Ç –µ–≥–æ –Ω–∞ access token.
    """
    full_url = message.text.strip() # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω–∞ –ø–æ–ª–Ω–∞—è —Å—Å—ã–ª–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {full_url}")

    try:
        parsed_url = urllib.parse.urlparse(full_url)
        code = urllib.parse.parse_qs(parsed_url.query)['code'][0] # –ò–∑–≤–ª–µ–∫–∞–µ–º code –∏–∑ URL
        logger.debug(f"–ò–∑–≤–ª–µ—á–µ–Ω code –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {code}")
    except KeyError:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ URL.")
        await state.clear()
        return

    data = {
        "grant_type": "authorization_code",
        "code": code,
        "client_id": settings.YANDEX_CLIENT_ID,
        "client_secret": settings.YANDEX_CLIENT_SECRET.get_secret_value(),  #  –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ SecretStr
        "redirect_uri": settings.REDIRECT_URI,
    }
    async with aiohttp.ClientSession() as session:
        try:
            async with session.post(
                "https://oauth.yandex.ru/token", data=data
            ) as response:
                response.raise_for_status()
                token_data = await response.json()
                access_token = token_data["access_token"]
                logger.info(
                    f"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω access token –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}."
                )

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                user_id = message.from_user.id
                await save_yandex_token(user_id, access_token)
                logger.info(
                    f"Access token –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î."
                )

                await message.answer(
                    "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n"
                    "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.",
                    reply_markup=ReplyKeyboardRemove(),
                )
                await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        except aiohttp.ClientError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–º–µ–Ω–µ code –Ω–∞ token: {e}")
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–º–µ–Ω–µ code –Ω–∞ token.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=ReplyKeyboardRemove(),
            )
            await state.clear()
        except Exception as e:
            logger.exception(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            await message.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.\n" "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=ReplyKeyboardRemove(),
            )
            await state.clear()